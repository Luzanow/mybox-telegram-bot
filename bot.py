import logging
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = "7680848123:AAHqNizmx3hOXmjVOmzdnwQCenlXHTWX8OA"
ADMIN_CHAT_ID = 5498505652

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# –°—Ç–∞—Ä—Ç
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
main_keyboard.add(
    "üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
    "üìç –õ–æ–∫–∞—Ü—ñ—ó",
    "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏"
)

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer("üñê –í—ñ—Ç–∞—î–º–æ —É MyBox!", reply_markup=main_keyboard)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:")

# –õ–æ–∫–∞—Ü—ñ—ó
@dp.message_handler(lambda msg: msg.text == "üìç –õ–æ–∫–∞—Ü—ñ—ó")
async def send_locations(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    locations = [
        ("üìç –≤—É–ª. –õ—É–≥–æ–≤–∞ 9", "https://www.google.com/maps?q=–≤—É–ª.+–õ—É–≥–æ–≤–∞+9,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ü–ª–æ–¥–æ–≤–∞ 1", "https://www.google.com/maps?q=–≤—É–ª.+–ü–ª–æ–¥–æ–≤–∞+1,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞ 21", "https://www.google.com/maps?q=–≤—É–ª.+–î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞+21,+–ö–∏—ó–≤")
    ]
    for name, url in locations:
        keyboard.add(types.InlineKeyboardButton(text=name, url=url))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=keyboard)
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=main_keyboard)

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(lambda msg: msg.text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏")
async def contact_info(message: types.Message):
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +38 095 93 87 317\nüìß Email: myboxua55@gmail.com", reply_markup=main_keyboard)

# –û—Ä–µ–Ω–¥–∞
@dp.message_handler(lambda msg: msg.text == "üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
async def rent_container(message: types.Message):
    user_data[message.from_user.id] = {}
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    keyboard.add(
        "5 —Ñ—É—Ç—ñ–≤ - 1850 –≥—Ä–Ω",
        "7.5 —Ñ—É—Ç—ñ–≤ - 2350 –≥—Ä–Ω",
        "15 —Ñ—É—Ç—ñ–≤ - 3800 –≥—Ä–Ω",
        "30 —Ñ—É—Ç—ñ–≤ - 6650 –≥—Ä–Ω"
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:", reply_markup=keyboard)

@dp.message_handler(lambda msg: "—Ñ—É—Ç—ñ–≤" in msg.text and "–≥—Ä–Ω" in msg.text)
async def choose_months(message: types.Message):
    size, price = message.text.split(" - ")
    user_data[message.from_user.id]["size"] = size.strip()
    user_data[message.from_user.id]["base_price"] = int(price.replace("–≥—Ä–Ω", "").strip())
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=4)
    keyboard.add(*[str(i) for i in range(1, 13)])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏ (–≤ –º—ñ—Å—è—Ü—è—Ö):", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text.isdigit() and 1 <= int(msg.text) <= 12)
async def ask_name(message: types.Message):
    user_data[message.from_user.id]["months"] = int(message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

@dp.message_handler(lambda msg: msg.text.isalpha())
async def ask_phone(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    keyboard.add(button)
    await message.answer("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.contact.phone_number
    await send_summary(message)

@dp.message_handler(lambda msg: msg.text and ("+" in msg.text or msg.text.replace(" ", "").isdigit()))
async def handle_manual_phone(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await send_summary(message)

async def send_summary(message):
    uid = message.from_user.id
    data = user_data[uid]
    size = data["size"]
    months = data["months"]
    name = data["name"]
    phone = data["phone"]
    base_price = data["base_price"]
    discount = 0.05 if months >= 9 else 0.03 if months >= 6 else 0.02 if months >= 3 else 0.0
    total = int(base_price * months * (1 - discount))
    text = (
        "‚úÖ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –Ü–º'—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {size}\n"
        f"üìÖ –ú—ñ—Å—è—Ü—ñ–≤: {months}\n"
        f"üí∏ –ó–Ω–∏–∂–∫–∞: {int(discount * 100)}%\n"
        f"üí∞ –°—É–º–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {total} –≥—Ä–Ω"
    )
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    await message.answer("‚úÖ –ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞.", reply_markup=main_keyboard)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
