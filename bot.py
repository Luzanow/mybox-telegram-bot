import logging
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = "7680848123:AAHmbEGQ49ZB8SXTGof4l3mbZ9vcIbuV_6k"
ADMIN_CHAT_ID = 5498505652  # –í–∞—à Telegram ID (–Ω–µ @username)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True, row_width=2
    )
    keyboard.add(
        "üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
        "üìç –õ–æ–∫–∞—Ü—ñ—ó",
        "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏"
    )
    await message.answer("üñê –í—ñ—Ç–∞—î–º–æ —É MyBox!", reply_markup=keyboard)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:")

# –õ–æ–∫–∞—Ü—ñ—ó
@dp.message_handler(lambda msg: msg.text == "üìç –õ–æ–∫–∞—Ü—ñ—ó")
async def send_locations(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    locations = [
        ("üìç –≤—É–ª. –õ—É–≥–æ–≤–∞ 9", "https://www.google.com/maps?q=–≤—É–ª.+–õ—É–≥–æ–≤–∞+9,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ü–ª–æ–¥–æ–≤–∞ 1", "https://www.google.com/maps?q=–≤—É–ª.+–ü–ª–æ–¥–æ–≤–∞+1,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞ 21", "https://www.google.com/maps?q=–≤—É–ª.+–î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞+21,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –°—ñ–º'—ó –°–æ—Å–Ω—ñ–Ω–∏—Ö 3", "https://www.google.com/maps?q=–≤—É–ª.+–°—ñ–º'—ó+–°–æ—Å–Ω—ñ–Ω–∏—Ö+3,+–ö–∏—ó–≤"),
        ("üìç –ø—Ä-—Ç –õ–æ–±–∞–Ω–æ–≤—Å—å–∫–æ–≥–æ 119", "https://www.google.com/maps?q=–ø—Ä–æ—Å–ø.+–õ–æ–±–∞–Ω–æ–≤—Å—å–∫–æ–≥–æ+119,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∞ 5", "https://www.google.com/maps?q=–≤—É–ª.+–°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∞+5,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ü—É—Ö—ñ–≤—Å—å–∫–∞ 4–ê", "https://www.google.com/maps?q=–≤—É–ª.+–ü—É—Ö—ñ–≤—Å—å–∫–∞+4–ê,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ù–æ–≤–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∞ 18", "https://www.google.com/maps?q=–≤—É–ª.+–ù–æ–≤–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∞+18,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ë–∞–ª—å–∑–∞–∫–∞ 85–ê", "https://www.google.com/maps?q=–≤—É–ª.+–ë–∞–ª—å–∑–∞–∫–∞+85–ê,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ë—É–¥—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó 5", "https://www.google.com/maps?q=–≤—É–ª.+–ë—É–¥—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó+5,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞ 9", "https://www.google.com/maps?q=–≤—É–ª.+–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞+9,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –í—ñ—Å–∫–æ–∑–Ω–∞ 1", "https://www.google.com/maps?q=–≤—É–ª.+–í—ñ—Å–∫–æ–∑–Ω–∞+1,+–ö–∏—ó–≤"),
        ("üìç –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞ 4", "https://www.google.com/maps?q=–≤—É–ª.+–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞+4,+–ö–∏—ó–≤"),
    ]
    for name, url in locations:
        keyboard.add(types.InlineKeyboardButton(text=name, url=url))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=keyboard)

# –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏
@dp.message_handler(lambda msg: msg.text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏")
async def contact_info(message: types.Message):
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +38 095 93 87 317\nüìß Email: myboxua55@gmail.com")

# –û—Ä–µ–Ω–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
@dp.message_handler(lambda msg: msg.text == "üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
async def rent_container(message: types.Message):
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫ –ø—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data[message.from_user.id] = {}
    # –ö–Ω–æ–ø–∫–∏ –∑ —Ä–æ–∑–º—ñ—Ä–æ–º —ñ —Ü—ñ–Ω–æ—é: "<—Ä–æ–∑–º—ñ—Ä> - <—Ü—ñ–Ω–∞> –≥—Ä–Ω"
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True, row_width=2
    )
    keyboard.add(
        "5 —Ñ—É—Ç—ñ–≤ - 1850 –≥—Ä–Ω",
        "7.5 —Ñ—É—Ç—ñ–≤ - 2350 –≥—Ä–Ω",
        "15 —Ñ—É—Ç—ñ–≤ - 3800 –≥—Ä–Ω",
        "30 —Ñ—É—Ç—ñ–≤ - 6650 –≥—Ä–Ω"
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:", reply_markup=keyboard)

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
@dp.message_handler(lambda msg: "—Ñ—É—Ç—ñ–≤" in msg.text and "–≥—Ä–Ω" in msg.text)
async def choose_months(message: types.Message):
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "5 —Ñ—É—Ç—ñ–≤ - 1850 –≥—Ä–Ω" -> size="5 —Ñ—É—Ç—ñ–≤", price=1850
    size_part, price_part = message.text.split("-")
    size_part = size_part.strip()  # "5 —Ñ—É—Ç—ñ–≤"
    price_value = int(price_part.replace("–≥—Ä–Ω", "").strip())  # 1850

    user_data[message.from_user.id]["size"] = size_part
    user_data[message.from_user.id]["base_price"] = price_value

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Ç–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏ (1..12) –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True, row_width=4
    )
    keyboard.add(*(str(i) for i in range(1, 13)))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏ (–≤ –º—ñ—Å—è—Ü—è—Ö):", reply_markup=keyboard)

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—è—Ü—ñ–≤ (1..12)
@dp.message_handler(lambda msg: msg.text.isdigit() and 1 <= int(msg.text) <= 12)
async def ask_name(message: types.Message):
    user_data[message.from_user.id]["months"] = int(message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —ñ–º'—è (—Å—Ç—Ä–æ–∫–∞)
@dp.message_handler(lambda msg: msg.text.isalpha())
async def ask_phone(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∞–±–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True
    )
    share_btn = types.KeyboardButton(
        "üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True
    )
    keyboard.add(share_btn)
    await message.answer("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=keyboard)

# –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–¥—ñ–ª–∏–≤—Å—è –Ω–æ–º–µ—Ä–æ–º
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.contact.phone_number
    await finish_order(message)

# –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É (+380..)
@dp.message_handler(lambda msg: msg.text and ("+" in msg.text or msg.text.replace(" ", "").isdigit()))
async def handle_manual_phone(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await finish_order(message)

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
async def finish_order(message: types.Message):
    uid = message.from_user.id
    data = user_data[uid]

    size = data["size"]           # "5 —Ñ—É—Ç—ñ–≤"
    base_price = data["base_price"]  # 1850 (int)
    months = data["months"]       # 1..12 (int)
    name = data["name"]
    phone = data["phone"]

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∏
    discount = 0.0
    if months >= 9:
        discount = 0.05
    elif months >= 6:
        discount = 0.03
    elif months >= 3:
        discount = 0.02

    total = int(base_price * months * (1 - discount))

    text = (
        "‚úÖ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –Ü–º'—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {size}\n"
        f"üìÖ –ú—ñ—Å—è—Ü—ñ–≤: {months}\n"
        f"üí∞ –°—É–º–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {total} –≥—Ä–Ω"
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await message.answer("‚úÖ –ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
