import logging
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = "7680848123:AAHmbEGQ49ZB8SXTGof4l3mbZ9vcIbuV_6k"
ADMIN_CHAT_ID = "@Luzanow"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"),
        types.KeyboardButton("üìç –õ–æ–∫–∞—Ü—ñ—ó"),
        types.KeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏")
    )
    await message.answer("üñê –í—ñ—Ç–∞—î–º–æ —É MyBox!", reply_markup=keyboard)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:")

# –õ–æ–∫–∞—Ü—ñ—ó
@dp.message_handler(lambda msg: msg.text == "üìç –õ–æ–∫–∞—Ü—ñ—ó")
async def send_locations(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    locations = [
        ("üìç –≤—É–ª. –õ—É–≥–æ–≤–∞ 9", "https://www.google.com/maps?q=–≤—É–ª.+–õ—É–≥–æ–≤–∞+9"),
        ("üìç –≤—É–ª. –ü–ª–æ–¥–æ–≤–∞ 1", "https://www.google.com/maps?q=–≤—É–ª.+–ü–ª–æ–¥–æ–≤–∞+1"),
        ("üìç –≤—É–ª. –î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞ 21", "https://www.google.com/maps?q=–≤—É–ª.+–î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞+21"),
        ("üìç –≤—É–ª. –°—ñ–º'—ó –°–æ—Å–Ω—ñ–Ω–∏—Ö 3", "https://www.google.com/maps?q=–≤—É–ª.+–°—ñ–º'—ó+–°–æ—Å–Ω—ñ–Ω–∏—Ö+3"),
        ("üìç –ø—Ä-—Ç –õ–æ–±–∞–Ω–æ–≤—Å—å–∫–æ–≥–æ 119", "https://www.google.com/maps?q=–õ–æ–±–∞–Ω–æ–≤—Å—å–∫–æ–≥–æ+119"),
        ("üìç –≤—É–ª. –°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∞ 5", "https://www.google.com/maps?q=–≤—É–ª.+–°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∞+5"),
        ("üìç –≤—É–ª. –ü—É—Ö—ñ–≤—Å—å–∫–∞ 4–ê", "https://www.google.com/maps?q=–≤—É–ª.+–ü—É—Ö—ñ–≤—Å—å–∫–∞+4–ê"),
        ("üìç –≤—É–ª. –ù–æ–≤–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∞ 18", "https://www.google.com/maps?q=–≤—É–ª.+–ù–æ–≤–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∞+18"),
        ("üìç –≤—É–ª. –ë–∞–ª—å–∑–∞–∫–∞ 85–ê", "https://www.google.com/maps?q=–≤—É–ª.+–ë–∞–ª—å–∑–∞–∫–∞+85–ê"),
        ("üìç –≤—É–ª. –ë—É–¥—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó 5", "https://www.google.com/maps?q=–≤—É–ª.+–ë—É–¥—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó+5"),
        ("üìç –≤—É–ª. –ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞ 9", "https://www.google.com/maps?q=–≤—É–ª.+–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞+9"),
        ("üìç –≤—É–ª. –í—ñ—Å–∫–æ–∑–Ω–∞ 1", "https://www.google.com/maps?q=–≤—É–ª.+–í—ñ—Å–∫–æ–∑–Ω–∞+1"),
        ("üìç –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞ 4", "https://www.google.com/maps?q=–≤—É–ª.+–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞+4")
    ]
    for name, url in locations:
        keyboard.add(types.InlineKeyboardButton(name, url=url))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=keyboard)

# –ö–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(lambda msg: msg.text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏")
async def contact(message: types.Message):
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +38 095 93 87 317\nüìß Email: myboxua55@gmail.com")

# –û—Ä–µ–Ω–¥–∞
@dp.message_handler(lambda msg: msg.text == "üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
async def rent_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    keyboard.add("5 —Ñ—É—Ç—ñ–≤", "7.5 —Ñ—É—Ç—ñ–≤", "15 —Ñ—É—Ç—ñ–≤", "30 —Ñ—É—Ç—ñ–≤")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text in ["5 —Ñ—É—Ç—ñ–≤", "7.5 —Ñ—É—Ç—ñ–≤", "15 —Ñ—É—Ç—ñ–≤", "30 —Ñ—É—Ç—ñ–≤"])
async def ask_months(message: types.Message):
    user_data[message.from_user.id] = {"size": message.text}
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=4)
    keyboard.add(*[str(i) for i in range(1, 13)])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏ (–≤ –º—ñ—Å—è—Ü—è—Ö):", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text.isdigit() and 0 < int(msg.text) <= 12)
async def ask_name(message: types.Message):
    user_data[message.from_user.id]["months"] = int(message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

@dp.message_handler(lambda msg: msg.text.isalpha())
async def ask_phone(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    await message.answer("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def confirm_phone(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.contact.phone_number
    await send_summary(message)

@dp.message_handler(lambda msg: msg.text.startswith("+") or msg.text.replace(" ", "").isdigit())
async def confirm_manual_phone(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await send_summary(message)

async def send_summary(message):
    uid = message.from_user.id
    data = user_data[uid]
    size = data["size"]
    months = data["months"]
    name = data["name"]
    phone = data["phone"]

    prices = {
        "5 —Ñ—É—Ç—ñ–≤": 1850,
        "7.5 —Ñ—É—Ç—ñ–≤": 2350,
        "15 —Ñ—É—Ç—ñ–≤": 3800,
        "30 —Ñ—É—Ç—ñ–≤": 6650
    }
    price = prices[size] * months
    discount = 0
    if months >= 9:
        discount = 0.05
    elif months >= 6:
        discount = 0.03
    elif months >= 3:
        discount = 0.02

    total = int(price * (1 - discount))

    text = f"\u2705 –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n\n"
    text += f"\U0001F464 –Ü–º'—è: {name}\n"
    text += f"\U0001F4DE –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    text += f"\U0001F4E6 –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {size}\n"
    text += f"\U0001F4C5 –ú—ñ—Å—è—Ü—ñ–≤: {months}\n"
    text += f"\U0001F4B0 –°—É–º–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {total} –≥—Ä–Ω"

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    await message.answer("\u2705 –î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
