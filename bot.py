import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

API_TOKEN = "7680848123:AAHmbEGQ49ZB8SXTGq4I13mBz9ycIbuV_6k"
ADMIN_CHAT_ID = "@Luzanow"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add("üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
    keyboard.add("üìç –õ–æ–∫–∞—Ü—ñ—ó")
    keyboard.add(KeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏"))
    await message.answer(‚Äúüì• –í—ñ—Ç–∞—î–º–æ —É MyBox!‚Äù)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:", reply_markup=keyboard)

# –õ–æ–∫–∞—Ü—ñ—ó
@dp.message_handler(lambda msg: msg.text == "üìç –õ–æ–∫–∞—Ü—ñ—ó")
async def send_locations(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    locations = [
        ("\ud83d\udccd –≤—É–ª. –õ—É–≥–æ–≤–∞ 9", "https://www.google.com/maps?q=–≤—É–ª.+–õ—É–≥–æ–≤–∞+9"),
        ("\ud83d\udccd –≤—É–ª. –ü–ª–æ–¥–æ–≤–∞ 1", "https://www.google.com/maps?q=–≤—É–ª.+–ü–ª–æ–¥–æ–≤–∞+1"),
        ("\ud83d\udccd –≤—É–ª. –î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞ 21", "https://www.google.com/maps?q=–≤—É–ª.+–î–µ–≥—Ç—è—Ä—ñ–≤—Å—å–∫–∞+21"),
        ("\ud83d\udccd –≤—É–ª. –°—ñ–º'—ó –°–æ—Å–Ω—ñ–Ω–∏—Ö 3", "https://www.google.com/maps?q=–≤—É–ª.+–°—ñ–º'—ó+–°–æ—Å–Ω—ñ–Ω–∏—Ö+3"),
        ("\ud83d\udccd –ø—Ä-—Ç –õ–æ–±–∞–Ω–æ–≤—Å—å–∫–æ–≥–æ 119", "https://www.google.com/maps?q=–ø—Ä-—Ç+–õ–æ–±–∞–Ω–æ–≤—Å—å–∫–æ–≥–æ+119"),
        ("\ud83d\udccd –≤—É–ª. –°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∞ 5", "https://www.google.com/maps?q=–≤—É–ª.+–°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∞+5"),
        ("\ud83d\udccd –≤—É–ª. –ü—É—Ö—ñ–≤—Å—å–∫–∞ 4–ê", "https://www.google.com/maps?q=–≤—É–ª.+–ü—É—Ö—ñ–≤—Å—å–∫–∞+4–ê"),
        ("\ud83d\udccd –≤—É–ª. –ù–æ–≤–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∞ 18", "https://www.google.com/maps?q=–≤—É–ª.+–ù–æ–≤–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∞+18"),
        ("\ud83d\udccd –≤—É–ª. –û–Ω–æ—Ä–µ –¥–µ –ë–∞–ª—å–∑–∞–∫–∞ 85–ê", "https://www.google.com/maps?q=–≤—É–ª.+–û–Ω–æ—Ä–µ+–¥–µ+–ë–∞–ª—å–∑–∞–∫–∞+85–ê"),
        ("\ud83d\udccd –≤—É–ª. –ë—É–¥—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó 5", "https://www.google.com/maps?q=–≤—É–ª.+–ë—É–¥—ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó+5"),
        ("\ud83d\udccd –≤—É–ª. –ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞ 9", "https://www.google.com/maps?q=–≤—É–ª.+–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞+9"),
        ("\ud83d\udccd –≤—É–ª. –í—ñ—Å–∫–æ–∑–Ω–∞ 1", "https://www.google.com/maps?q=–≤—É–ª.+–í—ñ—Å–∫–æ–∑–Ω–∞+1"),
        ("\ud83d\udccd –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞ 4", "https://www.google.com/maps?q=–≤—É–ª.+–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞+4")
    ]
    for name, url in locations:
        keyboard.add(InlineKeyboardButton(text=name, url=url))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:", reply_markup=keyboard)

# –ó–≤'—è–∑–æ–∫
@dp.message_handler(lambda msg: msg.text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏")
async def contact(message: types.Message):
    await message.answer("\ud83d\udcde –¢–µ–ª–µ—Ñ–æ–Ω: +38 095 93 87 317\n\ud83d\udce7 Email: myboxua55@gmail.com")

# –û—Ä–µ–Ω–¥–∞
@dp.message_handler(lambda msg: msg.text == "üì¶ –û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
async def rent_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add("5 —Ñ—É—Ç—ñ–≤ (1850 –≥—Ä–Ω)", "7.5 —Ñ—É—Ç—ñ–≤ (2350 –≥—Ä–Ω)", "15 —Ñ—É—Ç—ñ–≤ (3800 –≥—Ä–Ω)", "30 —Ñ—É—Ç—ñ–≤ (6650 –≥—Ä–Ω)")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:", reply_markup=keyboard)

@dp.message_handler(lambda msg: "—Ñ—É—Ç—ñ–≤" in msg.text)
async def ask_months(message: types.Message):
    size = message.text.split(" (")[0]
    user_data[message.from_user.id] = {"size": size}
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    keyboard.add(*[str(i) for i in range(1, 13)])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏ (–≤ –º—ñ—Å—è—Ü—è—Ö):", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text.isdigit() and 0 < int(msg.text) <= 12)
async def ask_name(message: types.Message):
    user_data[message.from_user.id]["months"] = int(message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

@dp.message_handler(lambda msg: msg.text.isalpha())
async def ask_phone(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    button = KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(button)
    await message.answer("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.contact.phone_number
    await submit_request(message)

@dp.message_handler(lambda msg: msg.text.startswith("+") or msg.text.replace(" ", "").isdigit())
async def handle_phone_text(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await submit_request(message)

async def submit_request(message: types.Message):
    uid = message.from_user.id
    data = user_data[uid]
    prices = {
        "5 —Ñ—É—Ç—ñ–≤": 1850,
        "7.5 —Ñ—É—Ç—ñ–≤": 2350,
        "15 —Ñ—É—Ç—ñ–≤": 3800,
        "30 —Ñ—É—Ç—ñ–≤": 6650
    }
    price = prices[data["size"]] * data["months"]
    discount = 0.05 if data["months"] >= 9 else 0.03 if data["months"] >= 6 else 0.02 if data["months"] >= 3 else 0
    total = int(price * (1 - discount))

    text = f"‚úÖ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\nüë§ –Ü–º'—è: {data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\nüì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {data['size']}\nüìÖ –ú—ñ—Å—è—Ü—ñ–≤: {data['months']}\nüí∞ –°—É–º–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {total} –≥—Ä–Ω"

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
